Stories and Use Cases
UC0	Authenticate
UC1	Show User Account (Identities - DONE, Topics - DONE, Replies - DONE)
UC2	Manage Identities - DONE
UC3	Create Topics - DONE
UC4	View Topics that involve the user - DONE 
UC5	Post replies (public/private) - DONE

TODO
add dependent to all the places where it applies

Data Model

User - DONE
	name
	Relationships:
		hasMany Identities
		hasMany Topics
		hasMany Replies
		INDIRECTLY each Identity has Topics that are assigned to them. These must be aggregated!
		
Identity - DONE
	identityType (Email, Phone Number, Twitter, etc)
	identityValue (the way the user is identified on this channel: e.g @nicktmro on Twitter provider)
	Relationships:
		hasMany 	Topics
		belongsTo	User		

Topic - DONE
	title
	body
	belongsTo 	User
	belongsTo	Addressee
	hasMany		Replies
	
Reply (almost exactly the opposite of a Topic in terms of Addressee and User. Addressee owns the Reply)
	body
	public	
	belongsTo Sender
	belongsTo TopicOwner	
	belongsTo Topic
	
		
Concepts:
Identity 
- unique user identifier: Phone number, email address, twitter handle, etc


Homework:
Identity abstract superclass: "Simple table inheritance"
Topic#TopicOwner is redundant as I can navigate to it via the Topic itself.